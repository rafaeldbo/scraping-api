{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introdu\u00e7\u00e3o","text":""},{"location":"#scraping-api","title":"Scraping-API","text":"<p>Documentation: https://rafaeldbo.github.io/scraping-api/</p> <p>Source Code: https://github.com/rafaeldbo/scraping-api</p> <p>Docker Image: https://hub.docker.com/r/rafaeldbo/scraping-api</p> <p>API Access http://scraping-api.us-east-1.elb.amazonaws.com/docs</p> <p>Essa \u00e9 uma API criada para o projeto da disciplina de <code>Computa\u00e7\u00e3o em Nuvem</code> do 6\u00ba Semestre (2024.2) do curso de Engenharia da Computa\u00e7\u00e3o do Insper. [Enunciado do Projeto]</p>"},{"location":"#recursos-implementados","title":"Recursos Implementados","text":"<p>A API permite a autentica\u00e7\u00e3o de usu\u00e1rios por meio de login e valida\u00e7\u00e3o de assinaturas JWT e a obten\u00e7\u00e3o de informa\u00e7\u00f5es de not\u00edcias presentes na Home Page do G1 por meio de um Web Scraping do site utilizando o <code>BeautifulSoup</code>.</p> <p>V\u00eddeo da API</p>"},{"location":"#tecnologias-usadas","title":"Tecnologias Usadas","text":"<ul> <li>Python 3.9+<ul> <li>FastAPI [ API FrameWork ]</li> <li>BeautifulSoup [ Web Scraping ]</li> <li>PyJWT [ Assinatura JWT ]</li> <li>SQLmodel + Psycopg2 [ Integra\u00e7\u00e3o com Banco de dados ]</li> </ul> </li> <li>PostegreSQL [ Banco de Dados ]</li> <li>Docker [ Disponibiliza\u00e7\u00e3o ]</li> <li>Amazon EKS [ Deploy ]</li> <li>MKdocs Material [ Documenta\u00e7\u00e3o ]</li> </ul>"},{"location":"#creditos","title":"Cr\u00e9ditos","text":"<p>Aluno/Desenvolvedor</p> <p>Rafael Dourado Bastos de Oliveira [Github] [Linkedin]</p> <p>Professor/Orientador</p> <p>Humberto Rodrigo Sandmann</p>"},{"location":"install/","title":"Instala\u00e7\u00e3o","text":""},{"location":"install/#pre-requisitos","title":"Pr\u00e9-Requisitos","text":"<p>Para a instala\u00e7\u00e3o da aplica\u00e7\u00e3o \u00e9 necess\u00e1rio a intala\u00e7\u00e3o do Docker. Tamb\u00e9m \u00e9 necess\u00e1rio possuir um arquivo <code>compose.yaml</code> com as informa\u00e7\u00f5es abaixo:</p> compose.yaml <p>Caso queira, voc\u00ea pode baixar o arquivo por meio desse link: compose.yaml compose.yaml<pre><code>name: scraping-api\n\nservices:\n\nweb:\n    image: rafaeldbo/scraping-api:latest\n    ports:\n        - ${WEB_PORT:-8080}:8080\n    depends_on:\n        - db\n    environment:\n        DATABASE_URL: postgresql+psycopg2://${POSTGRES_USER:-cloud}:${POSTGRES_PASSWORD:-cloudpassword}@db:${DB_PORT:-5430}/${DB_NAME:-cloud}\n        SECRET_KEY: ${SECRET_KEY:-cloudkey}\n\ndb:\n    image: postgres:latest\n    command: \n        - -p ${DB_PORT:-5430}\n    environment:\n        POSTGRES_USER: ${POSTGRES_USER:-cloud}\n        POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-cloudpassword}\n</code></pre></p>"},{"location":"install/#instalacao-rapida","title":"Instala\u00e7\u00e3o R\u00e1pida","text":"<p>Com os pr\u00e9-requisitos atendidos siga os passos abaixo:</p> <p>Intala\u00e7\u00e3o</p> <p>No terminal, no mesmo diret\u00f3rio em que est\u00e1 o arquivo <code>compose.yaml</code>, execute: compose<pre><code>docker compose up -d\n</code></pre></p>"},{"location":"install/#customizando","title":"Customizando","text":"<p>Customizando</p> <p>\u00c9 poss\u00edvel customizar o banco de dados, as portas de acesso, assim como a assinatura dos token JWT, por meio da cria\u00e7\u00e3o de um arquivo <code>.env</code> como o abaixo: .env<pre><code>POSTGRES_USER = \"cloud\"               # Usu\u00e1rio do Banco de dados\nPOSTGRES_PASSWORD = \"cloudpassword\"   # Senha do Banco de dados\nDB_PORT = 5432                        # Porta de conex\u00e3o do Banco de dados\nDB_NAME = \"cloud\"                     # Nome do Banco de dados\nWEB_PORT = 8080                       # Porta de conex\u00e3o da API\nSECRET_KEY = \"cloudkey\"               # Assinatura dos token JWT\n</code></pre> Tamb\u00e9m \u00e9 poss\u00edvel alterar o funcionamento da API criando sua pr\u00f3pria vers\u00e3o do cod\u00edgo fonte. Para isso, ser\u00e1 necess\u00e1rio possuir o Git para acessar o reposit\u00f3rio da API. Com o Git instalado, al\u00e9m do Docker \u00e9 claro, execute: C\u00f3digo Fonte<pre><code>git clone https://github.com/rafaeldbo/scraping-api\n</code></pre> O reposit\u00f3rio possui os seguintes arquivos. Estutura do Reposit\u00f3rio<pre><code>\ud83d\udcc1 app\n\u251c\u2500\u2500 \ud83d\udcc4 dockerfile @ arquivo de build da imagem da API\n\u251c\u2500\u2500 \ud83d\udcc4 main.py # arquivo principal da API\n\u251c\u2500\u2500 \ud83d\udcc4 requirements.txt \n\u2514\u2500\u2500 \ud83d\udcc4 ...\n\ud83d\udcc1 docs # arquivos da documenta\u00e7\u00e3o em mkdocs\n\u2514\u2500\u2500 \ud83d\udcc4 ...\n\ud83d\udcc4 compose.yaml # arquivo compose que utiliza a imagem padr\u00e3o da API\n\ud83d\udcc4 compose.build.yaml # arquivo compose para modifica\u00e7\u00f5es da API\n\ud83d\udcc4 .env.example # exemplo de .env para a API\n\ud83d\udcc4 ...\n</code></pre> Ap\u00f3s realizar as edi\u00e7\u00f5es desejadas no c\u00f3digo fonte da API. Para subir a aplica\u00e7\u00e3o, dentro da pasta do reposit\u00f3rio, execute: build &amp; compose<pre><code>docker compose -f compose.build.yaml up -d --build\n</code></pre></p>"},{"location":"k8s/","title":"Amazon EKS deploy","text":""},{"location":"k8s/#introducao","title":"Introdu\u00e7\u00e3o","text":"<p>Nesse guia ser\u00e3o mostrados os passos necess\u00e1rios para realizar o deploy da API em um cluster kubernets utilizando o AWS EKS (Amazon Elastic Kubernetes Service).</p> <p>\u00c9 poss\u00edvel acessar a API por meio do desse link.</p> <p>V\u00eddeo Explicativo</p>"},{"location":"k8s/#pre-requisitos","title":"Pr\u00e9-Requisitos","text":"<p>Ser\u00e1 necesses\u00e1rio acesso a uma conta AWS com permiss\u00e3o sufieciente para criar um cluster EKS (preferencialmente permiss\u00f5es de adminstrador). Al\u00e9m disso, ser\u00e1 \u00fatil possui o AWS CLI e o EKSCTL para ser possu\u00edvel utilizar os comandos mostrados nesse guia direto no console de seu computador. Caso n\u00e3o queira instala-los, \u00e9 poss\u00edvel executar os comando no AWS Cloud Shell, por\u00e9m podem haver algumas diferen\u00e7as n\u00e3o apontadas nesse guia.</p>"},{"location":"k8s/#construcao-do-cluster","title":"Constru\u00e7\u00e3o do Cluster","text":"<p>Ulizando o EKSCTL \u00e9 poss\u00edvel criar o cluster EKS de maneira f\u00e1cil, dando a responsabilidade de criar os recursos necess\u00e1rios para o EKSCTL:</p> <pre><code>eksctl create cluster --name scraping-api --region us-east-1 --nodes 2 --node-type t3.small\n</code></pre> <p>Entendendo o Comando</p> <p><code>--name</code>: nome do cluster e dos recursos necess\u00e1rios para sua cria\u00e7\u00e3o</p> <p><code>--region</code>: regi\u00e3o da AWS em que o cluster ser\u00e1 hospedado</p> <p><code>--nodes</code>: quantidade de n\u00f3s que o cluster possuir\u00e1</p> <p><code>--node-type</code>: tipo padr\u00e3o para as inst\u00e2ncias criadas no node group do cluster</p> <p>OBS\u00b9.: Foi escolhida a inst\u00e2ncia do tipo <code>t3.small</code> pois ela supre as necessidades de recursos da API e possui baixo pre\u00e7o de utiliza\u00e7\u00e3o.</p> <p>OBS\u00b2.: Esse comando pode demorar alguns minutos para terminar.</p> <p>Recursos Criados</p> <p>Para a cria\u00e7\u00e3o do cluster EKS s\u00e3o necess\u00e1rios alguns recursos que o EKSCTL criou automaticamente, s\u00e3o eles:</p> <ul> <li> <p>Uma <code>Role</code> do IAM para atribuir as permiss\u00f5es necess\u00e1rias para o funcionamento do cluster;</p> </li> <li> <p>Outra <code>Role</code> do IAM para atribuir as permiss\u00f5es necess\u00e1rias para o funcionamento do node group do cluster;</p> </li> <li> <p>Uma <code>Stack</code> do Cloud Formation onde foi construida toda a infraestrutura de rede (roteadores, subredes, etc) necess\u00e1ria para criar o cluster;</p> </li> <li> <p>O <code>Cluster</code> do EKS em si, que ser\u00e1 respons\u00e1vel por orquestrar os conteiners das aplica\u00e7\u00f5es;</p> </li> <li> <p>O <code>Node Group</code> do EC2 em que as inst\u00e2ncias utilizadas pelo cluster ser\u00e3o alocadas;</p> </li> </ul>"},{"location":"k8s/#deploy-dos-containers","title":"Deploy dos Containers","text":"<p>Com o cluster criado, \u00e9 necess\u00e1rio fazer o deploy dos containers de cada parte da nossa aplica\u00e7\u00e3o (o banco de dados e a API), mas antes disso, precisamos mudar o contexto do kubectl para que ele acesse o cluster rec\u00e9m criado:</p> <p>Mudando o Contexto</p> <p>Comando<pre><code>aws eks update-kubeconfig --name scraping-api --region us-east-1\n</code></pre> Resultado Esperado<pre><code>Updated context arn:aws:eks:us-east-1:&lt;Account ID&gt;:cluster/scraping-api in C:\\Users\\Rafael\\.kube\\config\n</code></pre></p> <p>Al\u00e9m da mudan\u00e7a de contexto, \u00e9 necess\u00e1rio criar os arquivos com as configura\u00e7\u00f5es dos containers que ser\u00e3o criados. Ser\u00e1 necess\u00e1rio um arquivo <code>db-deploy.yaml</code> para o container do banco de dados e um arquivo <code>web-deploy.yaml</code> para o container da API. As informa\u00e7\u00f5es a serem escritas nos arquivos est\u00e3o nas sess\u00f5es abaixo: </p> db-deploy.yaml <p>Caso queira, voc\u00ea pode baixar o arquivo por meio desse link: db-deploy.yaml </p> db-deploy.yaml<pre><code>apiVersion: apps/v1\nkind: Deployment\nmetadata:\nname: db\nlabels:\n    app: scraping-api\n    tier: database\nspec:\nreplicas: 1\nselector:\n    matchLabels:\n    app: scraping-api\n    tier: database\ntemplate:\n    metadata:\n    labels:\n        app: scraping-api\n        tier: database\n    spec:\n    containers:\n        - name: db\n        image: postgres:latest\n        env:\n            - name: POSTGRES_USER\n            value: \"cloud\"\n            - name: POSTGRES_PASSWORD\n            value: \"cloudpassword\"\n            - name: POSTGRES_DB\n            value: 'cloud'\n---\napiVersion: v1\nkind: Service\nmetadata:\nname: db\nlabels:\n    app: scraping-api\nspec:\nports:\n    - port: 5432\n    targetPort: 5432\nselector:\n    app: scraping-api\n    tier: database\n</code></pre> web-deploy.yaml <p>Caso queira, voc\u00ea pode baixar o arquivo por meio desse link: web-deploy.yaml </p> <p>web-deploy.yaml<pre><code>apiVersion: apps/v1\nkind: Deployment\nmetadata:\nname: web\nlabels:\n    app: scraping-api\nspec:\nreplicas: 1\nselector:\n    matchLabels:\n    app: scraping-api\n    tier: backend\ntemplate:\n    metadata:\n    labels:\n        app: scraping-api\n        tier: backend\n    spec:\n    containers:\n        - name: web\n        image: rafaeldbo/scraping-api:latest\n        ports:\n            - containerPort: 8080\n        env:\n            - name: DATABASE_URL\n            value: \"postgresql+psycopg2://cloud:cloudpassword@db:5432/cloud\"\n            - name: SECRET_KEY\n            value: \"cloudkey\"\n---\napiVersion: v1\nkind: Service\nmetadata:\nname: web\nlabels:\n    app: scraping-api\nspec:\ntype: LoadBalancer\nports:\n    - port: 80\n    targetPort: 8080\nselector:\n    app: scraping-api\n    tier: backend\n</code></pre> OBS.: O container da API \u00e9 do tipo <code>LoadBalancer</code>, para permitir que o container seja acessado por fora. Al\u00e9m disso, tamb\u00e9m permite que, quando houver mais de uma r\u00e9plica desse container, o acesso a API seja distribuido equilibradamente entre cada uma das r\u00e9plicas, evitando sobrecarga.</p> <p>Realizando o Deploy</p> <p>No mesmo diret\u00f3rio dos arquivos de deploy acima execute os comandos para configurar os containers: Banco de Dados<pre><code>kubectl apply -f ./db-deploy.yaml\n</code></pre> API<pre><code>kubectl apply -f ./web-deploy.yaml\n</code></pre></p> <p>Resultado</p> <p>O comando abaixo permite visualizar os servi\u00e7os criados e ter acesso ao Ip atribuido a API:</p> <p>Comando<pre><code>kubectl get services\n</code></pre> Resultado Esperado<pre><code>NAME         TYPE           CLUSTER-IP       EXTERNAL-IP                                                               PORT(S)        AGE\ndb           ClusterIP      10.100.174.148   &lt;none&gt;                                                                    5432/TCP       29m\nkubernetes   ClusterIP      10.100.0.1       &lt;none&gt;                                                                    443/TCP        42m\nweb          LoadBalancer   10.100.15.240    a5f54ce5261df479cb6d1104d0a981a8-1418404177.us-east-1.elb.amazonaws.com   80:32200/TCP   27m\n</code></pre></p>"},{"location":"use/","title":"Utiliza\u00e7\u00e3o","text":"In\u00edcio R\u00e1pido <p>A API possui uma documenta\u00e7\u00e3o gerada automaticamente usando o modelo OpenAPI, nele \u00e9 poss\u00edvel vizualiar de forma estruturada os <code>endpoints</code>, ver exemplos de <code>response</code>, e testa-los com exemplos pr\u00e9-definidos.</p> <p>http://localhost:8080/docs</p> <p>O link acima s\u00f3 ira funcionar caso voc\u00ea tenha utilizado a porta padr\u00e3o da API (<code>8080</code>).</p>"},{"location":"use/#registar","title":"Registar","text":"<p>Utilize esse endpoint para registrar um novo usu\u00e1rio do servi\u00e7o.</p> <p>Registro de Usu\u00e1rio</p> Endpoint<pre><code>POST /registrar\n</code></pre> <p>Request JSON body<pre><code>{\n    \"nome\": \"Aluno Insper\",\n    \"email\": \"aluno@al.insper.edu.br\",\n    \"senha\": \"senha_super_segura\"\n}\n</code></pre></p> <p>Response JSON body<pre><code>{\n    \"jwt\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImFsdW5vQGFsLmluc3Blci5lZHUuYnIifQ.YE4QiMzDt8JFPTRPJAmSYD2OG37RrKkoHgH-dcf8nYo\"\n}\n</code></pre></p> Campos <ul> <li>nome: Seu nome de usu\u00e1rio;</li> <li>email: Um e-mail v\u00e1lido que ainda n\u00e3o esteja associado a um usu\u00e1rio do servi\u00e7o;</li> <li>senha Uma senha de pelo menos 6 caracteres;</li> </ul> <p>Al\u00e9m de criar o usu\u00e1rio, ser\u00e1 retornado um token JWT que dever\u00e1 ser usado para autenticar suas consultas ao servi\u00e7o.</p> Resultado Postman <p></p>"},{"location":"use/#login","title":"Login","text":"<p>Utilize esse endpoint se autenticar como usu\u00e1rio do servi\u00e7o e receber de volta seu token JWT.</p> <p>Autentica\u00e7\u00e3o de Usu\u00e1rio</p> Endpoint<pre><code>POST /login\n</code></pre> <p>Request JSON body<pre><code>{\n    \"email\": \"aluno@al.insper.edu.br\",\n    \"senha\": \"senha_super_segura\"\n}\n</code></pre></p> <p>Response JSON body<pre><code>{\n    \"jwt\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImFsdW5vQGFsLmluc3Blci5lZHUuYnIifQ.YE4QiMzDt8JFPTRPJAmSYD2OG37RrKkoHgH-dcf8nYo\"\n}\n</code></pre></p> <p>Campos</p> <ul> <li>email: Um e-mail v\u00e1lido de um usu\u00e1rio j\u00e1 registrado no servi\u00e7o;</li> <li>senha A senha de pelo menos 6 caracteres correspondente ao e-mail;</li> </ul> Resultado Postman <p></p>"},{"location":"use/#consultar","title":"Consultar","text":"<p>A cunsulta ao servi\u00e7o retorna de 4 a 10 not\u00edcias presentes na capa do G1. De cada not\u00edcia, h\u00e1 as informa\u00e7\u00f5es: t\u00edtulo, link para a not\u00edcia, tema e a quanto tempo a publica\u00e7\u00e3o ocorreu. Para conseguir realizar a consulta \u00e9 necess\u00e1rio utulizar o Token JWT obtido no registro ou login.</p> <p>Consulta ao Servi\u00e7o</p> Endpoint<pre><code>GET /consultar\n\nHEADER \nAuthorization: Bearer &lt;token JWT&gt;\n</code></pre> <p>Response JSON body<pre><code>[\n    {\n        \"titulo\": \"Com 760 mil im\u00f3veis em SP sem energia 2 dias ap\u00f3s temporal, Aneel convoca reuni\u00e3o com Enel e mais 8 empresas\",\n        \"link\": \"https://g1.globo.com/sp/sao-paulo/noticia/2024/10/13/aneel-convoca-reuniao-com-representantes-da-enel-e-empresas-que-atendem-sp-apos-apagao.ghtml\",\n        \"tema\": \"S\u00e3o Paulo\",\n        \"tempo_publicacao\": \"H\u00e1 3 horas\"\n    },\n    {\n        \"titulo\": \"M\u00e3e e filho mortos atingidos por muro passavam todo dia por rua do acidente\",\n        \"link\": \"https://g1.globo.com/sp/bauru-marilia/noticia/2024/10/13/rua-onde-mae-e-filho-morreram-atingidos-por-muro-durante-temporal-era-caminho-da-escola-do-garoto-conhecia-bem-esse-trajeto.ghtml\",\n        \"tema\": \"Bauru e Mar\u00edlia\",\n        \"tempo_publicacao\": \"H\u00e1 18 horas\"\n    },\n    {\n        \"titulo\": \"C\u00e3o morre ap\u00f3s tocar em fio de m\u00e9dia tens\u00e3o que se rompeu com chuva\",\n        \"link\": \"https://g1.globo.com/sp/sao-paulo/noticia/2024/10/13/cao-morre-apos-tocar-em-fio-de-alta-tensao-e-corpo-segue-mais-de-24-horas-na-rua-com-cabo-energizado-so-queremos-nos-despedir-dizem-tutores.ghtml\",\n        \"tema\": \"S\u00e3o Paulo\",\n        \"tempo_publicacao\": \"H\u00e1 7 horas\"\n    },\n    {\n        \"titulo\": \"g1 promove debates com candidatos a prefeito de 5 cidades da Grande SP\",\n        \"link\": \"https://g1.globo.com/sp/sao-paulo/eleicoes/2024/noticia/2024/10/11/g1-promove-debates-com-candidatos-a-prefeito-no-2o-turno-das-eleicoes-de-cinco-cidades-da-grande-sp.ghtml\",\n        \"tema\": \"Elei\u00e7\u00f5es 2024 em S\u00e3o Paulo\",\n        \"tempo_publicacao\": \"H\u00e1 7 horas\"\n    }\n]\n</code></pre></p> Resultado Postman <p></p>"}]}